{"version":3,"sources":["App.tsx","index.tsx"],"names":["darkTheme","createMuiTheme","palette","type","Evidence","evidenceList","ghosts","name","evidence","App","tmp","map","eve","value","React","useState","setValue","evidenceSelectors","formValue","find","e","Fragment","FormControl","component","FormLabel","RadioGroup","row","aria-label","onChange","event","newValue","cast","target","element","push","handleChange","FormControlLabel","control","Radio","label","labelPlacement","mustHave","filter","v","dontHave","options","ghost","i","length","ThemeProvider","theme","CssBaseline","Container","maxWidth","o","ev","mh","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8cead93.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    createMuiTheme,\n    CssBaseline, FormControl,\n    FormControlLabel, FormLabel,\n    Radio,\n    RadioGroup,\n    ThemeProvider,\n} from '@material-ui/core';\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nconst Evidence = {\n    EMFLevel5: 'EMF Level 5',\n    GhostWriting: 'Ghost Writing',\n    Fingerprints: 'Fingerprints',\n    SpiritBox: 'Spirit Box',\n    FreezingTemperatures: 'Freezing Temperatures',\n    GhostOrb: 'Ghost Orb',\n};\n\nconst evidenceList = [Evidence.EMFLevel5, Evidence.GhostWriting, Evidence.Fingerprints, Evidence.SpiritBox, Evidence.FreezingTemperatures, Evidence.GhostOrb];\n\ninterface Ghost {\n    name: string;\n    evidence: string[];\n}\n\nconst ghosts: Ghost[] = [\n    {\n        name: 'Banshee',\n        evidence: [Evidence.EMFLevel5, Evidence.Fingerprints, Evidence.FreezingTemperatures],\n    },\n    {\n        name: 'Demon',\n        evidence: [Evidence.GhostWriting, Evidence.SpiritBox, Evidence.FreezingTemperatures],\n    },\n    {\n        name: 'Jinn',\n        evidence: [Evidence.EMFLevel5, Evidence.SpiritBox, Evidence.GhostOrb],\n    },\n    {\n        name: 'Mare',\n        evidence: [Evidence.EMFLevel5, Evidence.SpiritBox, Evidence.GhostOrb],\n    },\n    {\n        name: 'Oni',\n        evidence: [Evidence.EMFLevel5, Evidence.GhostWriting, Evidence.SpiritBox],\n    },\n    {\n        name: 'Phantom',\n        evidence: [Evidence.EMFLevel5, Evidence.FreezingTemperatures, Evidence.GhostOrb],\n    },\n    {\n        name: 'Poltergeist',\n        evidence: [Evidence.Fingerprints, Evidence.SpiritBox, Evidence.GhostOrb],\n    },\n    {\n        name: 'Revenant',\n        evidence: [Evidence.EMFLevel5, Evidence.GhostWriting, Evidence.Fingerprints],\n    },\n    {\n        name: 'Shade',\n        evidence: [Evidence.EMFLevel5, Evidence.GhostWriting, Evidence.GhostOrb],\n    },\n    {\n        name: 'Spirit',\n        evidence: [Evidence.GhostWriting, Evidence.Fingerprints, Evidence.SpiritBox],\n    },\n    {\n        name: 'Wraith',\n        evidence: [Evidence.Fingerprints, Evidence.SpiritBox, Evidence.FreezingTemperatures],\n    },\n    {\n        name: 'Yurei',\n        evidence: [Evidence.GhostWriting, Evidence.FreezingTemperatures, Evidence.GhostOrb],\n    },\n];\n\ninterface EvidenceCollection {\n    type: string;\n    value: string;\n}\n\nfunction App(): JSX.Element {\n    const tmp = evidenceList.map(eve => ({ type: eve, value: 'unknown' }));\n    const [value, setValue] = React.useState(tmp);\n\n    function handleChange(type: string, event: React.ChangeEvent<HTMLInputElement>) {\n        const cast = event.target as unknown as HTMLInputElement;\n        const found = value.find(element => element.type === type);\n        let newValue: EvidenceCollection[];\n        if (found) {\n            newValue = value.map(element => {\n                if (element.type === type) {\n                    return { type, value: cast.value };\n                }else {\n                    return element;\n                }\n            });\n        }else {\n            newValue = [...value];\n            newValue.push({ type, value: cast.value });\n        }\n        setValue(newValue);\n    }\n\n    const evidenceSelectors = evidenceList.map(evidence => {\n        const formValue = value.find(e => e.type === evidence)?.value;\n        return (\n            <React.Fragment key={evidence}>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>{evidence}</FormLabel>\n                    <RadioGroup row aria-label={evidence} value={formValue} onChange={e => handleChange(evidence, e)}>\n                        <FormControlLabel value='evidence' control={<Radio/>} label='Evidence' labelPlacement='start'/>\n                        <FormControlLabel value='unknown' control={<Radio/>} label='unknown' labelPlacement='start'/>\n                        <FormControlLabel value='no-evidence' control={<Radio/>} label='No evidence'\n                            labelPlacement='start'/>\n                    </RadioGroup>\n                </FormControl><br/>\n            </React.Fragment>\n        );\n    });\n\n    const mustHave = value.filter(v => v.value === 'evidence').map(tmp => tmp.type);\n    const dontHave = value.filter(v => v.value === 'no-evidence').map(tmp => tmp.type);\n    const options = ghosts.filter(ghost => {\n        for (let i = 0; i < mustHave.length; ++i) {\n            if (!ghost.evidence.find(e => e === mustHave[i])) {\n                return false;\n            }\n        }\n        for (let i = 0; i < dontHave.length; ++i) {\n            if (ghost.evidence.find(e => e === dontHave[i])) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return (\n        <div>\n            <ThemeProvider theme={darkTheme}>\n                <CssBaseline/>\n                <Container maxWidth='lg'>\n                    {evidenceSelectors}<br/>\n                    <table>\n                        {options.map(o => <tr key={o.name}>\n                            <th>{o.name}</th>\n                            {\n                                o.evidence.filter(ev => !mustHave.find(mh => mh === ev))\n                                    .map(v => <th key={v}>{v}</th>)\n                            }\n                        </tr>)\n                        }\n                    </table>\n                </Container>\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}